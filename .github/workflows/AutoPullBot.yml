name: Auto Pull Request

on:
  push:
    branches:
      - '*'            # This will trigger on any branch
    branches-ignore:
      - main           # This ignores the main branch

jobs:
  create-pull-request:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Extract branch name
      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      # Step 3: Fetch main branch and check if the current branch is behind
      - name: Check if branch is behind main
        run: |
          git fetch origin main
          BEHIND=$(git rev-list --count HEAD..origin/main)
          echo "BEHIND=$BEHIND" >> $GITHUB_ENV
          if [ "$BEHIND" -gt 0 ]; then
            echo "Branch is behind main by $BEHIND commits"
          else
            echo "Branch is up to date with main"
          fi

      # Step 4: Get latest commit message
      - name: Get latest commit message
        id: commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "commit-message=$COMMIT_MESSAGE" >> $GITHUB_ENV

      # Step 5: Create a pull request to merge into main
      - name: Create Pull Request
        run: |
          if [ "$BEHIND" -gt 0 ]; then
            PR_URL=$(gh pr create \
              --title "Auto Pull Request - ${{ env.BRANCH_NAME }}" \
              --body "${{ env.commit-message }}" \
              --base main \
              --head ${{ env.BRANCH_NAME }} \
              --label "github_actions" \
              --label "Auto Merge")
            echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          else
            echo "No need to create a pull request as the branch is up to date with main."
          fi

      # Step 6: Log Pull Request URL
      - name: Log Pull Request URL
        run: echo "Created PR: $PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
