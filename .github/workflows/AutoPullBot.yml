name: Auto Pull Bot

on:
  push:
    branches-ignore:
      - main  # Exclude 'main' branch from triggering the workflow
  workflow_dispatch:  # Allows manual triggering for testing

jobs:
  create-pull-request:
    runs-on: self-hosted  # Use your self-hosted Windows runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Extract branch name and log it (PowerShell for Windows)
      - name: Get Branch Name (PowerShell)
        shell: powershell
        run: |
          $GITHUB_REF = $env:GITHUB_REF
          $BRANCH_NAME = $GITHUB_REF -replace 'refs/heads/', ''
          echo "BRANCH_NAME=$BRANCH_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Step 3: Ensure we're not on main
      - name: Ensure We're Not on Main
        run: |
          if ($env:BRANCH_NAME -eq "main") {
            Write-Host "We are on the main branch; no pull request will be created."
            exit 0
          }
          Write-Host "Not on the main branch; proceeding."

      # Step 4: Fetch main branch and check if the current branch is behind
      - name: Check if Branch is Behind Main
        run: |
          git fetch origin main
          $BEHIND = git rev-list --count HEAD..origin/main
          Write-Host "Branch is behind main by $BEHIND commits."
          echo "BEHIND=$BEHIND" | Out-File -FilePath $env:GITHUB_ENV -Append
          if ($BEHIND -le 0) {
            Write-Host "Branch is up to date with main; no pull request will be created."
            exit 0
          }

      # Step 5: Check if a pull request already exists
      - name: Check if Pull Request Exists
        id: check_pr
        shell: powershell
        run: |
          try {
            $PR_EXIST = gh pr list --head $env:BRANCH_NAME --base main --json number --jq '.[0].number'
            if ($PR_EXIST) {
              Write-Host "A pull request for branch '$env:BRANCH_NAME' already exists: https://github.com/$($env:GITHUB_REPOSITORY)/pull/$PR_EXIST"
              echo "PR_EXIST=$PR_EXIST" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "No existing pull request found."
            }
          } catch {
            Write-Host "Failed to check for existing pull requests: $_"
          }
        env:
          GH_TOKEN: ${{ secrets.AutoPullBot }}  # Use your secret here

      # Step 6: Create a pull request only if none exists
      - name: Create Pull Request (if none exists)
        if: steps.check_pr.outputs.PR_EXIST == ''
        id: create_pr
        shell: powershell
        run: |
          try {
            Write-Host "Creating a new pull request..."
            $PR_OUTPUT = gh pr create `
              --title "Auto Pull Request - $env:BRANCH_NAME" `
              --body "Auto-generated PR to merge '$env:BRANCH_NAME' into 'main'" `
              --base main `
              --head "$env:BRANCH_NAME" `
              --repo "$env:GITHUB_REPOSITORY"
            echo "PR_OUTPUT=$PR_OUTPUT" | Out-File -FilePath $env:GITHUB_ENV -Append
            $PR_URL = $PR_OUTPUT -match 'http.*$' | Out-String
            echo "PR_URL=$PR_URL" | Out-File -FilePath $env:GITHUB_ENV -Append
          } catch {
            Write-Host "Pull request creation failed: $_"
          }

      # Step 7: Add labels to the pull request
      - name: Add 'github_actions' and 'Auto Merge' Labels
        shell: powershell
        run: |
          try {
            Write-Host "Adding labels to the pull request..."
            $PR_NUMBER = if ($env:PR_EXIST) { $env:PR_EXIST } else { $env:PR_URL -match '[0-9]+' | Out-String }
            gh pr edit $PR_NUMBER --add-label "github_actions" --add-label "Auto Merge"
          } catch {
            Write-Host "Failed to add labels to the pull request: $_"
          }
        env:
          GH_TOKEN: ${{ secrets.AutoPullBot }}  # Use your secret here
